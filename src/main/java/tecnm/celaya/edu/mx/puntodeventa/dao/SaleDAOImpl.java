package tecnm.celaya.edu.mx.puntodeventa.dao;\n\nimport tecnm.celaya.edu.mx.puntodeventa.model.Sale;\nimport tecnm.celaya.edu.mx.puntodeventa.model.SaleDetail;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.sql.Timestamp;\nimport java.util.List;\n\npublic class SaleDAOImpl implements SaleDAO {\n    private final Connection connection;\n\n    public SaleDAOImpl(Connection connection) {\n        this.connection = connection;\n    }\n\n    @Override\n    public Integer saveSale(Sale sale, List<SaleDetail> details) {\n        String saleSql = \"INSERT INTO sales (customer_id, sale_date, total) VALUES (?, ?, ?)\";\n        String detailSql = \"INSERT INTO sale_details (sale_id, product_id, quantity, unit_price, subtotal) VALUES (?, ?, ?, ?, ?)\";\n        String updateStockSql = \"UPDATE products SET stock = stock - ? WHERE id = ?\";\n\n        try {\n            connection.setAutoCommit(false); // Iniciar transacción\n\n            // Insertar la venta y obtener el ID generado\n            try (PreparedStatement saleStmt = connection.prepareStatement(saleSql, Statement.RETURN_GENERATED_KEYS)) {\n                saleStmt.setInt(1, sale.getCustomerId());\n                saleStmt.setTimestamp(2, Timestamp.valueOf(sale.getSaleDate()));\n                saleStmt.setDouble(3, sale.getTotal());\n                saleStmt.executeUpdate();\n\n                try (ResultSet generatedKeys = saleStmt.getGeneratedKeys()) {\n                    if (generatedKeys.next()) {\n                        int saleId = generatedKeys.getInt(1);\n\n                        // Insertar los detalles de la venta\n                        try (PreparedStatement detailStmt = connection.prepareStatement(detailSql)) {\n                            for (SaleDetail detail : details) {\n                                detailStmt.setInt(1, saleId);\n                                detailStmt.setInt(2, detail.getProductId());\n                                detailStmt.setInt(3, detail.getQuantity());\n                                detailStmt.setDouble(4, detail.getUnitPrice());\n                                detailStmt.setDouble(5, detail.getSubtotal());\n                                detailStmt.addBatch();\n                            }\n                            detailStmt.executeBatch();\n                        }\n\n                        // Actualizar el stock de productos\n                        try (PreparedStatement updateStockStmt = connection.prepareStatement(updateStockSql)) {\n                            for (SaleDetail detail : details) {\n                                updateStockStmt.setInt(1, detail.getQuantity());\n                                updateStockStmt.setInt(2, detail.getProductId());\n                                updateStockStmt.addBatch();\n                            }\n                            updateStockStmt.executeBatch();\n                        }\n\n                        connection.commit(); // Confirmar transacción\n                        return saleId;\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            try {\n                connection.rollback(); // Revertir transacción en caso de error\n            } catch (SQLException rollbackEx) {\n                rollbackEx.printStackTrace();\n            }\n            e.printStackTrace();\n        }\ finally {\n            try {\n                connection.setAutoCommit(true);\n            } catch (SQLException finalEx) {\n                finalEx.printStackTrace();\n            }\n        }\n        return null;\n    }\n}\n